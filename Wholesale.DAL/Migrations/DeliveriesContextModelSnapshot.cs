// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wholesale.DAL;

namespace Wholesale.DAL.Migrations
{
    [DbContext(typeof(DeliveriesContext))]
    partial class DeliveriesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:order_status", "created,in_progress,completed,canceled")
                .HasAnnotation("Npgsql:Enum:user_role", "client,courier,employee")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Wholesale.BL.Models.Address", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("character varying");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnName("postal_code")
                        .HasColumnType("character varying");

                    b.HasKey("UserId")
                        .HasName("adresses_pkey");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Wholesale.BL.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'', '1', '', '', 'True', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("integer");

                    b.Property<int?>("CourierId")
                        .HasColumnName("courier_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("order_status");

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("CourierId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Wholesale.BL.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<int>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("order_details_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("Wholesale.BL.Models.OrderWorth", b =>
                {
                    b.Property<decimal?>("TotalWorth")
                        .HasColumnName("total_worth")
                        .HasColumnType("numeric");

                    b.ToTable("OrderWorth");
                });

            modelBuilder.Entity("Wholesale.BL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'', '1', '', '', 'True', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("integer");

                    b.HasKey("ProductId")
                        .HasName("products_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Wholesale.BL.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'', '1', '', '', 'True', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("CategoryId")
                        .HasName("product_categories_pkey");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("Wholesale.BL.Models.User", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'', '1', '', '', 'True', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("password_salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Role")
                        .HasColumnName("role")
                        .HasColumnType("user_role");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Wholesale.BL.Models.Address", b =>
                {
                    b.HasOne("Wholesale.BL.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Wholesale.BL.Models.Address", "UserId")
                        .HasConstraintName("fk_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wholesale.BL.Models.Order", b =>
                {
                    b.HasOne("Wholesale.BL.Models.User", "Client")
                        .WithMany("OrdersClient")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wholesale.BL.Models.User", "Courier")
                        .WithMany("OrdersCourier")
                        .HasForeignKey("CourierId")
                        .HasConstraintName("fk_courier")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Wholesale.BL.Models.OrderDetails", b =>
                {
                    b.HasOne("Wholesale.BL.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wholesale.BL.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wholesale.BL.Models.Product", b =>
                {
                    b.HasOne("Wholesale.BL.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_category")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
